name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:
    strategy:
          matrix:
            targetplatform: [x86, x64]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      SigningCertificate: certificate.pfx
      Solution_Path: Mil.Paperwork.WriteOff.sln
      Test_Project_Path: Mil.Paperwork.Tests\Mil.Paperwork.Tests.csproj
      Wap_Project_Directory: Mil.Paperwork.Package
      Wap_Project_Name: Mil.Paperwork.Package.wapproj
      Artefacts_Directory: Application\Release\net8.0-windows\
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    ## Ignore Workload errors
    #- name: Update .NET Workloads (Ignore Errors)
    #  run: dotnet workload update || true
      
    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Restore dependencies *
    - name: Restore dependencies
      run: dotnet restore --runtime win-${{ matrix.targetplatform }}
      
    # # Build the project *
    # - name: Build the project
    #   run: dotnet build --configuration Release --no-restore

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test $env:Test_Project_Path

    # Restore the application
    - name:  Restore the Wpf application to populate the obj folder
      run: msbuild $env:Solution_Path /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
      env:
        Configuration: Debug
        RuntimeIdentifier: win-${{ matrix.targetplatform }}

    # Decode the Base64 encoded Pfx
    - name: Decode the Pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $currentDirectory = Get-Location
        $certificatePath = Join-Path -Path $currentDirectory -ChildPath $env:Wap_Project_Directory -AdditionalChildPath $env:SigningCertificate
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Build the Windows Application Packaging project
    - name: Build the Windows Application Packaging Project (wapproj) 
      run: msbuild $env:Solution_Path /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        AppxBundle: Never
        BuildMode: SideLoadOnly
        Configuration: Release
        TargetPlatform: ${{ matrix.targetplatform }}
    
    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MSIX Package ${{ github.run_number }} (${{ matrix.targetplatform }})
        path: Mil.Paperwork.Package\AppPackages\



    # # Decode the Base64 encoded Pfx
    # - name: Decode the Pfx
    #   run: |
    #     $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #     $currentDirectory = Get-Location
    #     $certificatePath = Join-Path -Path $currentDirectory -ChildPath $env:Wap_Project_Directory -AdditionalChildPath $env:SigningCertificate
    #     [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # # Build the Windows Application Packaging project for Dev and Prod_Sideload
    # - name: Build the Windows Application Packaging Project (wapproj) for ${{ matrix.ChannelName }}
    #   run: msbuild $env:Wap_Project_Directory/$env:Wap_Project_Name /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:GenerateAppInstallerFile=$env:GenerateAppInstallerFile /p:AppInstallerUri=$env:AppInstallerUri /p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
    #   if: ${{ matrix.ChannelName }} != Prod_Store
    #   env:
    #     AppInstallerUri: ${{ matrix.DistributionUrl }}
    #     BuildMode: SideLoadOnly
    #     Configuration: ${{ matrix.Configuration }}
    #     GenerateAppInstallerFile: True
    #     TargetPlatform: ${{ matrix.TargetPlatform }}

    # # Upload build artifacts
    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: BuildOutput
    #     path: ${{ env.Artefacts_Directory }}
